// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package appointment_experiment

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteEverything = `-- name: DeleteEverything :exec

DELETE FROM appointment
`

func (q *Queries) DeleteEverything(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteEverything)
	return err
}

const getAppointments = `-- name: GetAppointments :many

SELECT appointment_id, name, start_time, end_time
FROM appointment
`

func (q *Queries) GetAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Name,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAppointment = `-- name: InsertAppointment :exec

INSERT INTO appointment (name, start_time, end_time)
VALUES ($1,
        $2,
        $3)
`

type InsertAppointmentParams struct {
	Name      pgtype.Text
	StartTime pgtype.Timestamp
	EndTime   pgtype.Timestamp
}

func (q *Queries) InsertAppointment(ctx context.Context, arg InsertAppointmentParams) error {
	_, err := q.db.Exec(ctx, insertAppointment, arg.Name, arg.StartTime, arg.EndTime)
	return err
}
