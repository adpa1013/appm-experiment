// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package appointment_experiment

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Month string

const (
	MonthJanuary   Month = "January"
	MonthFebruary  Month = "February"
	MonthMarch     Month = "March"
	MonthApril     Month = "April"
	MonthMay       Month = "May"
	MonthJune      Month = "June"
	MonthJuly      Month = "July"
	MonthAugust    Month = "August"
	MonthSeptember Month = "September"
	MonthOctober   Month = "October"
	MonthNovember  Month = "November"
	MonthDecember  Month = "December"
)

func (e *Month) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Month(s)
	case string:
		*e = Month(s)
	default:
		return fmt.Errorf("unsupported scan type for Month: %T", src)
	}
	return nil
}

type NullMonth struct {
	Month Month
	Valid bool // Valid is true if Month is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMonth) Scan(value interface{}) error {
	if value == nil {
		ns.Month, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Month.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMonth) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Month), nil
}

type Scheduletype string

const (
	ScheduletypeDaily   Scheduletype = "Daily"
	ScheduletypeWeekly  Scheduletype = "Weekly"
	ScheduletypeMonthly Scheduletype = "Monthly"
	ScheduletypeYearly  Scheduletype = "Yearly"
)

func (e *Scheduletype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Scheduletype(s)
	case string:
		*e = Scheduletype(s)
	default:
		return fmt.Errorf("unsupported scan type for Scheduletype: %T", src)
	}
	return nil
}

type NullScheduletype struct {
	Scheduletype Scheduletype
	Valid        bool // Valid is true if Scheduletype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScheduletype) Scan(value interface{}) error {
	if value == nil {
		ns.Scheduletype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Scheduletype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScheduletype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Scheduletype), nil
}

type Tbledappointment struct {
	Kedappointmentid int32
	Strname          pgtype.Text
	Dtmbegin         pgtype.Timestamp
	Dtmend           pgtype.Timestamp
}

type Tbledappointmentseries struct {
	Kedappointmentid int32
	Escheduletype    Scheduletype
	Dtmend           pgtype.Timestamp
	Kdayweekschedule pgtype.Int2
	Kmonthschedule   pgtype.Int4
	Kyearschedule    pgtype.Int4
	Emonthofyear     NullMonth
}

type Tblexcludedfromseries struct {
	Kdecappointmentid int32
	Kedappointmentid  int32
	Dtmsrcseriesapmt  pgtype.Timestamp
}
